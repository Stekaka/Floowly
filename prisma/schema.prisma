// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  domain    String?
  plan      String   @default("professional")
  maxUsers  Int      @default(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("companies")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  fullName      String?
  phone         String?
  avatar        String?
  role          String    @default("user")
  status        String    @default("active")
  companyId     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  // NextAuth fields
  emailVerified DateTime?
  image         String?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Customer {
 id        String   @id @default(cuid())
 name      String
 company   String?
 email     String?
 phone     String
  address   String?
  tags      String @default("[]")
 status    String   @default("active")
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 quotes Quote[]
 jobs   Job[]

 @@map("customers")
}

model Quote {
 id          String   @id @default(cuid())
 customerId  String
 title       String
 description String?
  items       String
  subtotal    Float
  taxAmount   Float
  total       Float
  status      QuoteStatus @default(draft)
  hours       Float?
  materialCost Float?
  markupPercentage Float?
  profitEstimate Float?
 expiresAt   DateTime?
 createdAt   DateTime @default(now())
 updatedAt   DateTime @updatedAt

 customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
 jobs       Job[]

 @@map("quotes")
}

model Job {
 id            String   @id @default(cuid())
 customerId    String
 quoteId       String?
 title         String
 description   String?
 startDate     DateTime
 endDate       DateTime
 startTime     String?
 endTime       String?
  hours         Float?
  materialCost  Float?
  quotedPrice   Float?
 status        JobStatus @default(pending)
 notes         String?
 timezone      String   @default("Europe/Stockholm")
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt

 customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
 quote         Quote?   @relation(fields: [quoteId], references: [id], onDelete: SetNull)

 @@map("jobs")
}

enum QuoteStatus {
 draft
 sent
 accepted
 rejected
 expired
}

enum JobStatus {
  pending
  confirmed
  in_progress
  completed
  cancelled
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
